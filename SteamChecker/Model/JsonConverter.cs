using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace SteamChecker.Model
{
    // <auto-generated />
    //
    // To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
    //
    //    using CodeBeautify;
    //
    //    var welcome9 = Welcome9.FromJson(jsonString);

    namespace CodeBeautify
    {
        using System;
        using System.Collections.Generic;

        using System.Globalization;
        using Newtonsoft.Json;
        using Newtonsoft.Json.Converters;

        public partial class A_User
        {
            [JsonProperty("AccountName")]
            public string AccountName { get; set; }

            [JsonProperty("PersonaName")]
            public string PersonaName { get; set; }

            [JsonProperty("RememberPassword")]
            [JsonConverter(typeof(ParseStringConverter))]
            public long RememberPassword { get; set; }

            [JsonProperty("WantsOfflineMode")]
            [JsonConverter(typeof(ParseStringConverter))]
            public long WantsOfflineMode { get; set; }

            [JsonProperty("SkipOfflineModeWarning")]
            [JsonConverter(typeof(ParseStringConverter))]
            public long SkipOfflineModeWarning { get; set; }

            [JsonProperty("AllowAutoLogin")]
            [JsonConverter(typeof(ParseStringConverter))]
            public long AllowAutoLogin { get; set; }

            [JsonProperty("MostRecent")]
            [JsonConverter(typeof(ParseStringConverter))]
            public long MostRecent { get; set; }

            [JsonProperty("Timestamp")]
            [JsonConverter(typeof(ParseStringConverter))]
            public long Timestamp { get; set; }
        }

        public partial class Welcome9
        {
            public static Dictionary<string, Welcome9> FromJson(string json) => JsonConvert.DeserializeObject<Dictionary<string, Welcome9>>(json, CodeBeautify.Converter.Settings);
        }

        public static class Serialize
        {
            public static string ToJson(this Dictionary<string, Welcome9> self) => JsonConvert.SerializeObject(self, CodeBeautify.Converter.Settings);
        }

        internal static class Converter
        {
            public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
            {
                MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
                DateParseHandling = DateParseHandling.None,
                Converters =
            {
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
            };
        }

        internal class ParseStringConverter : JsonConverter
        {
            public override bool CanConvert(Type t) => t == typeof(long) || t == typeof(long?);

            public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
            {
                if (reader.TokenType == JsonToken.Null) return null;
                var value = serializer.Deserialize<string>(reader);
                long l;
                if (Int64.TryParse(value, out l))
                {
                    return l;
                }
                throw new Exception("Cannot unmarshal type long");
            }

            public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
            {
                if (untypedValue == null)
                {
                    serializer.Serialize(writer, null);
                    return;
                }
                var value = (long)untypedValue;
                serializer.Serialize(writer, value.ToString());
                return;
            }

            public static readonly ParseStringConverter Singleton = new ParseStringConverter();
        }
    }

}
